generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int           @id @default(autoincrement())
  username                      String        @unique(map: "username") @db.VarChar(32)
  profilePicture                String        @db.Text
  password                      String        @db.Text
  Game                          Game[]
  Participant                   Participant[]
  Photo                         Photo[]
  Response_Response_userToUser  Response[]    @relation("Response_userToUser")
  Response_Response_valueToUser Response[]    @relation("Response_valueToUser")
}

model Category {
  id          Int     @id @default(autoincrement())
  title       String  @db.Text
  type        String  @db.VarChar(7)
  shuffleSeed String  @db.VarChar(64)
  game        Int
  Game        Game    @relation(fields: [game], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Category_ibfk_1")
  Photo       Photo[]

  @@index([game], map: "game")
}

model Game {
  id          Int           @id @default(autoincrement())
  accessCode  String        @unique(map: "accessCode") @db.VarChar(4)
  owner       Int
  status      String        @db.VarChar(8)
  Category    Category[]
  User        User          @relation(fields: [owner], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Game_ibfk_1")
  Participant Participant[]

  @@index([owner], map: "owner")
}

model Participant {
  game      Int
  user      Int
  score     Int?
  hasJoined Boolean
  hasPhotos Boolean
  createdAt DateTime @db.DateTime(0)
  Game      Game     @relation(fields: [game], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Participant_ibfk_1")
  User      User     @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Participant_ibfk_2")

  @@id([game, user])
  @@index([user], map: "user")
}

model Photo {
  id       Int        @id @default(autoincrement())
  link     String     @db.Text
  category Int
  user     Int
  Category Category   @relation(fields: [category], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Photo_ibfk_1")
  User     User       @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Photo_ibfk_2")
  Response Response[]

  @@index([category], map: "category")
  @@index([user], map: "user")
}

model Response {
  id                        Int   @id @default(autoincrement())
  user                      Int
  photo                     Int
  value                     Int
  User_Response_userToUser  User  @relation("Response_userToUser", fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Response_ibfk_1")
  Photo                     Photo @relation(fields: [photo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Response_ibfk_2")
  User_Response_valueToUser User  @relation("Response_valueToUser", fields: [value], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Response_ibfk_3")

  @@index([user], map: "user")
  @@index([value], map: "value")
  @@index([photo], map: "photo")
}
